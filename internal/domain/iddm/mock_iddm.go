// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/iddm/iddm.go

// Package iddm is a generated GoMock package.
package iddm

import (
	context "context"
	reflect "reflect"

	idpo "github.com/Me1onRind/go-demo/internal/model/po/idpo"
	gomock "github.com/golang/mock/gomock"
)

// MockIdDomain is a mock of IdDomain interface.
type MockIdDomain struct {
	ctrl     *gomock.Controller
	recorder *MockIdDomainMockRecorder
}

// MockIdDomainMockRecorder is the mock recorder for MockIdDomain.
type MockIdDomainMockRecorder struct {
	mock *MockIdDomain
}

// NewMockIdDomain creates a new mock instance.
func NewMockIdDomain(ctrl *gomock.Controller) *MockIdDomain {
	mock := &MockIdDomain{ctrl: ctrl}
	mock.recorder = &MockIdDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdDomain) EXPECT() *MockIdDomainMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockIdDomain) GetId(ctx context.Context, idType idpo.IdType, maxRetry int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId", ctx, idType, maxRetry)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetId indicates an expected call of GetId.
func (mr *MockIdDomainMockRecorder) GetId(ctx, idType, maxRetry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIdDomain)(nil).GetId), ctx, idType, maxRetry)
}
